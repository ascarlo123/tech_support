import telebot
from config import TOKEN
from telebot import types
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
API_TOKEN = TOKEN
bot = telebot.TeleBot(API_TOKEN)

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_ID = [7155079148]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
def create_table():
    connection = sqlite3.connect('tech_support.db')
    cursor = connection.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nickname TEXT,
            question TEXT
        )
    ''')
    connection.commit()
    connection.close()

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
create_table()

# –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
faq = {
    "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?": "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.",
    "–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞?": "–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –≤–æ–π–¥—è –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏ –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'. –¢–∞–º –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.",
    "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?": "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Ç–º–µ–Ω–æ–π –∑–∞–∫–∞–∑–∞ –¥–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏.",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –ø—Ä–∏—à–µ–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º?": "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ä–∞–∑—É —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π. –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å –æ–±–º–µ–Ω–æ–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ç–æ–≤–∞—Ä–∞.",
    "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?": "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —á–∞—Ç-–±–æ—Ç–∞.",
    "–ö–∞–∫ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ?": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. –¢–∞–º —É–∫–∞–∑–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ä–æ–∫–∏."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_question(nickname, question):
    connection = sqlite3.connect('tech_support.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO Questions (nickname, question) VALUES (?, ?)', (nickname, question))
    connection.commit()
    connection.close()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ãüîç")
    btn2 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì")
    btn3 = types.KeyboardButton("–ù–∞—à —Å–∞–π—Çüåê")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø –¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ '–í—Å–µ –Ω–∞ —Å–≤–µ—Ç–µüåü'.".format(message.from_user), reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ãüîç")
    btn2 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì")
    btn3 = types.KeyboardButton("–ù–∞—à —Å–∞–π—Çüåê")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

# –ö–Ω–æ–ø–∫–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
@bot.message_handler(func=lambda message: message.text == "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ãüîç")
def send_faq_questions(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for question in faq.keys():
        markup.add(types.KeyboardButton(question))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    show_main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ 
@bot.message_handler(func=lambda message: message.text in faq.keys())
def send_faq_answer(message):
    answer = faq[message.text]
    bot.send_message(message.chat.id, answer)

# –ö–Ω–æ–ø–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
@bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì")
def ask_question(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_question)

@bot.message_handler(func=lambda message: message.text == "–ù–∞—à —Å–∞–π—Çüåê")
def our_site(message):
    bot.send_message(message.chat.id, "–£ –Ω–∞—Å –Ω–µ—Ç—É —Å–∞–π—Ç–∞((9")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_question(nickname, question):
    connection = sqlite3.connect('tech_support.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO Questions (nickname, question) VALUES (?, ?)', (nickname, question))
    connection.commit()
    connection.close()

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
def process_question(message):
    if not hasattr(message, 'text') or not message.text:
        return bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    question = message.text.strip()
    
    if not question:
        bot.send_message(message.chat.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return
    
    add_question(user_id, question)
    bot.send_message(message.chat.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.üì®")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
    for admin_id in ADMIN_ID:
        bot.send_message(admin_id, f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {first_name} (ID: {user_id}): {question}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@bot.message_handler(commands=['reply'])
def reply_to_question(message):
    if message.chat.id in ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        connection = sqlite3.connect('tech_support.db')
        cursor = connection.cursor()
        cursor.execute('SELECT id, nickname, question FROM Questions')
        questions = cursor.fetchall()
        connection.close()

        if not questions:
            bot.send_message(message.chat.id, "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for q in questions:
            question_text = f"ID: {q[0]}, {q[1]}: {q[2]}"
            markup.add(types.KeyboardButton(question_text))
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@bot.message_handler(func=lambda message: message.text.startswith("ID:"))
def handle_reply(message):
    question_id = int(message.text.split(",")[0].split(":")[1].strip())
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
    bot.register_next_step_handler(message, lambda msg: send_reply(msg, question_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_reply(message, question_id):
    answer = message.text.strip()
    if not answer:
        bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return
    
    connection = sqlite3.connect('tech_support.db')
    cursor = connection.cursor()
    cursor.execute('SELECT nickname FROM Questions WHERE id = ?', (question_id,))
    result = cursor.fetchone()
    connection.close()

    if result:
        user_id = result[0]
        logging.info(f"Attempting to send message to user ID: {user_id}")
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: {answer}")
            bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            logging.error(f"Failed to send message to user ID {user_id}: {e}")
    else:
        bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == '__main__':
    bot.polling()
